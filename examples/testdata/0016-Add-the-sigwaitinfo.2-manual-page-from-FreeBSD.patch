From d03ec5a2616c1521a2c2c25ed122f3fdc0ee0698 Mon Sep 17 00:00:00 2001
From: Sascha Wildner <saw@online.de>
Date: Wed, 20 Jul 2016 19:10:52 +0200
Subject: [PATCH 016/100] Add the sigwaitinfo.2 manual page from FreeBSD.

Also, bring in a number of fixes/improvements from FreeBSD in
other manual pages.

Submitted-by: zrj
Taken-from:   FreeBSD
---
 lib/libc/sys/Makefile.inc  |   6 +-
 lib/libc/sys/sigaction.2   | 223 +++++++++++++++++++++++++++++++--------------
 lib/libc/sys/sigpending.2  |  17 ++--
 lib/libc/sys/sigreturn.2   |  26 +++---
 lib/libc/sys/sigwaitinfo.2 | 207 +++++++++++++++++++++++++++++++++++++++++
 lib/libpthread/sigwait.3   |  16 ++--
 6 files changed, 398 insertions(+), 97 deletions(-)
 create mode 100644 lib/libc/sys/sigwaitinfo.2

diff --git a/lib/libc/sys/Makefile.inc b/lib/libc/sys/Makefile.inc
index 73a6aae..a52da3c 100644
--- a/lib/libc/sys/Makefile.inc
+++ b/lib/libc/sys/Makefile.inc
@@ -91,8 +91,9 @@ MAN+=	_exit.2 accept.2 access.2 acct.2 adjtime.2 \
 	setgroups.2 setpgid.2 setregid.2 setresuid.2 setreuid.2 setsid.2 \
 	setuid.2 shmat.2 shmctl.2 shmget.2 shutdown.2 \
 	sigaction.2 sigaltstack.2 sigpending.2 sigprocmask.2 sigreturn.2 \
-	sigstack.2 sigsuspend.2 socket.2 socketpair.2 stat.2 statfs.2 \
-	statvfs.2 swapon.2 symlink.2 sync.2 sysarch.2 syscall.2 \
+	sigstack.2 sigsuspend.2 sigwaitinfo.2 socket.2 socketpair.2 \
+	stat.2 statfs.2 statvfs.2 swapon.2 \
+	symlink.2 sync.2 sysarch.2 syscall.2 \
 	truncate.2 tls.2 umask.2 umtx.2 undelete.2 \
 	unlink.2 unlinkat.2 utimensat.2 utimes.2 utrace.2 usched_set.2 \
 	uuidgen.2 \
@@ -183,6 +184,7 @@ MLINKS+=shmat.2 shmat.3 \
 	shmat.2 shmdt.2
 MLINKS+=shmctl.2 shmctl.3
 MLINKS+=shmget.2 shmget.3
+MLINKS+=sigwaitinfo.2 sigtimedwait.2
 MLINKS+=stat.2 fstat.2 stat.2 fstatat.2 stat.2 lstat.2
 MLINKS+=statfs.2 fstatfs.2
 MLINKS+=statvfs.2 fstatvfs.2
diff --git a/lib/libc/sys/sigaction.2 b/lib/libc/sys/sigaction.2
index 1b63aac..bb4badf 100644
--- a/lib/libc/sys/sigaction.2
+++ b/lib/libc/sys/sigaction.2
@@ -28,7 +28,7 @@
 .\"	From: @(#)sigaction.2	8.2 (Berkeley) 4/3/94
 .\" $FreeBSD: src/lib/libc/sys/sigaction.2,v 1.22.2.10 2002/12/29 16:35:34 schweikh Exp $
 .\"
-.Dd April 3, 1994
+.Dd July 20, 2016
 .Dt SIGACTION 2
 .Os
 .Sh NAME
@@ -39,26 +39,23 @@
 .Sh SYNOPSIS
 .In signal.h
 .Bd -literal
-struct sigaction {
-	/*
-	 * Signal handler function if flag SA_SIGINFO is not used and for
-	 * SIG_DFL and SIG_IGN.
-	 */
-	void     (*sa_handler)(int);
-
-	/* Signal handler function if flag SA_SIGINFO is used */
-	void     (*sa_sigaction)(int, siginfo_t *, void *);
-
-	sigset_t sa_mask;            /* signal mask to apply */
-	int	 sa_flags;           /* see signal options below */
+struct  sigaction {
+        void    (*sa_handler)(int);
+        void    (*sa_sigaction)(int, siginfo_t *, void *);
+        int     sa_flags;               /* see signal options below */
+        sigset_t sa_mask;               /* signal mask to apply */
 };
 .Ed
 .Ft int
-.Fn sigaction "int sig" "const struct sigaction *act" "struct sigaction *oact"
+.Fo sigaction
+.Fa "int sig"
+.Fa "const struct sigaction * restrict act"
+.Fa "struct sigaction * restrict oact"
+.Fc
 .Sh DESCRIPTION
 The system defines a set of signals that may be delivered to a process.
 Signal delivery resembles the occurrence of a hardware interrupt:
-the signal is normally blocked from further occurrence, the current process
+the signal is normally blocked from further occurrence, the current thread
 context is saved, and a new one is built.
 A process may specify a
 .Em handler
@@ -67,13 +64,14 @@ to which a signal is delivered, or specify that a signal is to be
 A process may also specify that a default action is to be taken
 by the system when a signal occurs.
 A signal may also be
-.Em blocked ,
-in which case its delivery is postponed until it is
+.Em blocked
+for a thread,
+in which case it will not be delivered to that thread until it is
 .Em unblocked .
 The action to be taken on delivery is determined at the time
 of delivery.
 Normally, signal handlers execute on the current stack
-of the process.
+of the thread.
 This may be changed, on a per-handler basis,
 so that signals are taken on a special
 .Em "signal stack" .
@@ -85,20 +83,30 @@ but other signals may yet occur.
 A global
 .Em "signal mask"
 defines the set of signals currently blocked from delivery
-to a process.
-The signal mask for a process is initialized
+to a thread.
+The signal mask for a thread is initialized
 from that of its parent (normally empty).
 It may be changed with a
 .Xr sigprocmask 2
-call, or when a signal is delivered to the process.
+or
+.Xr pthread_sigmask 3
+call, or when a signal is delivered to the thread.
 .Pp
 When a signal
-condition arises for a process, the signal is added to a set of
-signals pending for the process.
-If the signal is not currently
+condition arises for a process or thread, the signal is added to a set of
+signals pending for the process or thread.
+Whether the signal is directed at the process in general or at a specific
+thread depends on how it is generated.
+For signals directed at a specific thread,
+if the signal is not currently
+.Em blocked
+by the thread then it is delivered to the thread.
+For signals directed at the process,
+if the signal is not currently
 .Em blocked
-by the process then it is delivered to the process.
-Signals may be delivered any time a process enters the operating system
+by all threads then it is delivered to one thread that does not have it blocked
+(the selection of which is unspecified).
+Signals may be delivered any time a thread enters the operating system
 (e.g., during a system call, page fault or trap, or clock interrupt).
 If multiple signals are ready to be delivered at the same time,
 any signals that could be caused by traps are delivered first.
@@ -107,35 +115,37 @@ appearing to interrupt the handlers for the previous signals
 before their first instructions.
 The set of pending signals is returned by the
 .Xr sigpending 2
-function.
+system call.
 When a caught signal
-is delivered, the current state of the process is saved,
+is delivered, the current state of the thread is saved,
 a new signal mask is calculated (as described below),
 and the signal handler is invoked.
 The call to the handler
 is arranged so that if the signal handling routine returns
-normally the process will resume execution in the context
+normally the thread will resume execution in the context
 from before the signal's delivery.
-If the process wishes to resume in a different context, then it
+If the thread wishes to resume in a different context, then it
 must arrange to restore the previous context itself.
 .Pp
-When a signal is delivered to a process a new signal mask is
+When a signal is delivered to a thread a new signal mask is
 installed for the duration of the process' signal handler
 (or until a
 .Xr sigprocmask 2
-call is made).
+system call is made).
 This mask is formed by taking the union of the current signal mask set,
 the signal to be delivered, and
 the signal mask associated with the handler to be invoked.
 .Pp
-.Fn Sigaction
+The
+.Fn sigaction
+system call
 assigns an action for a signal specified by
 .Fa sig .
 If
 .Fa act
 is non-zero, it
 specifies an action
-.Pf ( Dv SIG_DFL ,
+.Dv ( SIG_DFL ,
 .Dv SIG_IGN ,
 or a handler routine) and mask
 to be used when delivering the specified signal.
@@ -144,10 +154,20 @@ If
 is non-zero, the previous handling information for the signal
 is returned to the user.
 .Pp
+The above declaration of
+.Vt "struct sigaction"
+is not literal.
+It is provided only to list the accessible members.
+See
+.In sys/signal.h
+for the actual definition.
+In particular, the storage occupied by sa_handler and sa_sigaction overlaps,
+and an application can not use both simultaneously.
+.Pp
 Once a signal handler is installed, it normally remains installed
 until another
 .Fn sigaction
-call is made, or an
+system call is made, or an
 .Xr execve 2
 is performed.
 A signal-specific default action may be reset by
@@ -173,7 +193,7 @@ current and pending instances
 of the signal are ignored and discarded.
 .Pp
 Options may be specified by setting
-.Em sa_flags .
+.Fa sa_flags .
 The meaning of the various bits is as follows:
 .Bl -tag -offset indent -width SA_RESETHANDXX
 .It Dv SA_NOCLDSTOP
@@ -195,15 +215,21 @@ the calling process exit.
 If the calling process subsequently issues a
 .Xr wait 2
 (or equivalent), it blocks until all of the calling process's child
-processes terminate, and then returns a value of -1 with
+processes terminate, and then returns a value of \-1 with
 .Va errno
 set to
 .Er ECHILD .
+The same effect of avoiding zombie creation can also be achieved by setting
+.Fa sa_handler
+for
+.Dv SIGCHLD
+to
+.Dv SIG_IGN .
 .It Dv SA_ONSTACK
 If this bit is set, the system will deliver the signal to the process
 on a
 .Em "signal stack" ,
-specified with
+specified by each thread with
 .Xr sigaltstack 2 .
 .It Dv SA_NODEFER
 If this bit is set, further occurrences of the delivered signal are
@@ -212,11 +238,14 @@ not masked during the execution of the handler.
 If this bit is set, the handler is reset back to
 .Dv SIG_DFL
 at the moment the signal is delivered.
+.It Dv SA_RESTART
+See paragraph below.
 .It Dv SA_SIGINFO
 If this bit is set, the handler function is assumed to be pointed to by the
-.Dv sa_sigaction
-member of struct sigaction and should match the prototype shown above or as
-below in
+.Fa sa_sigaction
+member of
+.Vt "struct sigaction"
+and should match the prototype shown above or as below in
 .Sx EXAMPLES .
 This bit should not be set when assigning
 .Dv SIG_DFL
@@ -234,7 +263,7 @@ Restart of pending calls is requested
 by setting the
 .Dv SA_RESTART
 bit in
-.Ar sa_flags .
+.Fa sa_flags .
 The affected system calls include
 .Xr open 2 ,
 .Xr read 2 ,
@@ -254,14 +283,20 @@ However, calls that have already committed are not restarted,
 but instead return a partial success (for example, a short read count).
 .Pp
 After a
+.Xr pthread_create 3
+the signal mask is inherited by the new thread and
+the set of pending signals and the signal stack for the new thread are empty.
+.Pp
+After a
 .Xr fork 2
 or
 .Xr vfork 2
 all signals, the signal mask, the signal stack,
 and the restart/interrupt flags are inherited by the child.
 .Pp
-.Xr Execve 2
-reinstates the default
+The
+.Xr execve 2
+system call reinstates the default
 action for all signals which were caught and
 resets all signals to be caught on the user stack.
 Ignored signals remain ignored;
@@ -327,10 +362,14 @@ Any attempt to do so will be silently ignored.
 The following functions are either reentrant or not interruptible
 by signals and are async-signal safe.
 Therefore applications may
-invoke them, without restriction, from signal-catching functions:
+invoke them, without restriction, from signal-catching functions
+or from a child process after calling
+.Xr fork 2
+in a multi-threaded process:
 .Pp
 Base Interfaces:
 .Pp
+.Fn _Exit ,
 .Fn _exit ,
 .Fn access ,
 .Fn alarm ,
@@ -347,6 +386,9 @@ Base Interfaces:
 .Fn dup2 ,
 .Fn execle ,
 .Fn execve ,
+.Fn faccessat ,
+.Fn fchmodat ,
+.Fn fchownat ,
 .Fn fcntl ,
 .Fn fork ,
 .Fn fpathconf ,
@@ -364,14 +406,22 @@ Base Interfaces:
 .Fn link ,
 .Fn lseek ,
 .Fn mkdir ,
+.Fn mkdirat ,
 .Fn mkfifo ,
+.Fn mkfifoat ,
+.Fn mknod ,
+.Fn mknodat ,
 .Fn open ,
+.Fn openat ,
 .Fn pathconf ,
 .Fn pause ,
 .Fn pipe ,
 .Fn raise ,
 .Fn read ,
+.Fn readlink ,
+.Fn readlinkat ,
 .Fn rename ,
+.Fn renameat ,
 .Fn rmdir ,
 .Fn setgid ,
 .Fn setpgid ,
@@ -389,6 +439,8 @@ Base Interfaces:
 .Fn sigsuspend ,
 .Fn sleep ,
 .Fn stat ,
+.Fn symlink ,
+.Fn symlinkat ,
 .Fn sysconf ,
 .Fn tcdrain ,
 .Fn tcflow ,
@@ -403,6 +455,7 @@ Base Interfaces:
 .Fn umask ,
 .Fn uname ,
 .Fn unlink ,
+.Fn unlinkat ,
 .Fn utime ,
 .Fn wait ,
 .Fn waitpid ,
@@ -426,19 +479,29 @@ Realtime Interfaces:
 All functions not in the above lists are considered to be unsafe
 with respect to signals.
 That is to say, the behaviour of such
-functions when called from a signal handler is undefined.
+functions is undefined when they are called from a signal handler
+that interrupted an unsafe function.
+In general though, signal handlers should do little more than set a
+flag; most other actions are not safe.
+.Pp
+Also, it is good practice to make a copy of the global variable
+.Va errno
+and restore it before returning from the signal handler.
+This protects against the side effect of
+.Va errno
+being set by functions called from inside the signal handler.
 .Sh RETURN VALUES
 .Rv -std sigaction
 .Sh EXAMPLES
 There are three possible prototypes the handler may match:
 .Bl -tag -offset indent -width short
-.It ANSI C:
+.It Tn ANSI C :
 .Ft void
 .Fn handler int ;
 .It Traditional BSD style:
 .Ft void
 .Fn handler int "int code" "struct sigcontext *scp" ;
-.It POSIX SA_SIGINFO:
+.It Tn POSIX Dv SA_SIGINFO :
 .Ft void
 .Fn handler int "siginfo_t *info" "ucontext_t *uap" ;
 .El
@@ -447,11 +510,12 @@ The handler function should match the
 .Dv SA_SIGINFO
 prototype if the
 .Dv SA_SIGINFO
-bit is set in flags.
+bit is set in
+.Fa sa_flags .
 It then should be pointed to by the
-.Dv sa_sigaction
+.Fa sa_sigaction
 member of
-.Dv struct sigaction .
+.Vt "struct sigaction" .
 Note that you should not assign
 .Dv SIG_DFL
 or
@@ -461,36 +525,45 @@ this way.
 If the
 .Dv SA_SIGINFO
 flag is not set, the handler function should match
-either the ANSI C or traditional
+either the
+.Tn ANSI C
+or traditional
 .Bx
 prototype and be pointed to by
 the
-.Dv sa_handler
+.Fa sa_handler
 member of
-.Dv struct sigaction .
+.Vt "struct sigaction" .
 In practice,
 .Dx
-always sends the three arguments of the latter and since the ANSI C
+always sends the three arguments of the latter and since the
+.Tn ANSI C
 prototype is a subset, both will work.
 The
-.Dv sa_handler
+.Fa sa_handler
 member declaration in
-.Dx
-include files is that of ANSI C (as required by POSIX),
+.Fx
+include files is that of
+.Tn ANSI C
+(as required by
+.Tn POSIX ) ,
 so a function pointer of a
 .Bx Ns -style
-function needs to be casted to
+function needs to be cast to
 compile without warning.
 The traditional
 .Bx
-style is not portable and since its capabilities are a full subset of a
+style is not portable and since its capabilities
+are a full subset of a
 .Dv SA_SIGINFO
-handler, its use is deprecated.
+handler,
+its use is deprecated.
 .Pp
 The
 .Fa sig
 argument is the signal number, one of the
 .Dv SIG...
+values from
 .In signal.h .
 .Pp
 The
@@ -498,9 +571,9 @@ The
 argument of the
 .Bx Ns -style
 handler and the
-.Dv si_code
+.Fa si_code
 member of the
-.Dv info
+.Fa info
 argument to a
 .Dv SA_SIGINFO
 handler contain a numeric code explaining the
@@ -517,16 +590,20 @@ The
 .Fa scp
 argument to a
 .Bx Ns -style
-handler points to an instance of struct
-sigcontext.
+handler points to an instance of
+.Vt "struct sigcontext" .
 .Pp
 The
 .Fa uap
-argument to a POSIX
+argument to a
+.Tn POSIX
 .Dv SA_SIGINFO
-handler points to an instance of ucontext_t.
+handler points to an instance of
+.Vt ucontext_t .
 .Sh ERRORS
-.Fn Sigaction
+The
+.Fn sigaction
+system call
 will fail and no new signal handler will be installed if one
 of the following occurs:
 .Bl -tag -width Er
@@ -538,7 +615,9 @@ or
 points to memory that is not a valid part of the process
 address space.
 .It Bq Er EINVAL
-.Fa Sig
+The
+.Fa sig
+argument
 is not a valid signal number.
 .It Bq Er EINVAL
 An attempt is made to ignore or supply a handler for
@@ -564,7 +643,7 @@ or
 .Sh STANDARDS
 The
 .Fn sigaction
-function call is expected to conform to
+system call is expected to conform to
 .St -p1003.1-90 .
 The
 .Dv SA_ONSTACK
@@ -601,3 +680,7 @@ and
 .\" and
 .\" SA_SIGINFO
 flags are featuring options commonly found in other operating systems.
+The flags are approved by
+.St -susv2 ,
+along with the option to avoid zombie creation by ignoring
+.Dv SIGCHLD .
diff --git a/lib/libc/sys/sigpending.2 b/lib/libc/sys/sigpending.2
index 1b8f27a..440742c 100644
--- a/lib/libc/sys/sigpending.2
+++ b/lib/libc/sys/sigpending.2
@@ -29,10 +29,9 @@
 .\" SUCH DAMAGE.
 .\"
 .\"	@(#)sigpending.2	8.3 (Berkeley) 1/12/94
-.\" $FreeBSD: src/lib/libc/sys/sigpending.2,v 1.5.2.5 2001/12/14 18:34:01 ru Exp $
-.\" $DragonFly: src/lib/libc/sys/sigpending.2,v 1.2 2003/06/17 04:26:47 dillon Exp $
+.\" $FreeBSD: head/lib/libc/sys/sigpending.2 255296 2013-09-06 09:08:40Z jilles $
 .\"
-.Dd January 12, 1994
+.Dd July 20, 2016
 .Dt SIGPENDING 2
 .Os
 .Sh NAME
@@ -47,8 +46,8 @@
 .Sh DESCRIPTION
 The
 .Fn sigpending
-function returns a mask of the signals pending for delivery
-to the calling process in the location indicated by
+system call returns a mask of the signals pending for delivery
+to the calling thread or the calling process in the location indicated by
 .Fa set .
 Signals may be pending because they are currently masked,
 or transiently before delivery (although the latter case is not
@@ -56,7 +55,9 @@ normally detectable).
 .Sh RETURN VALUES
 .Rv -std sigpending
 .Sh ERRORS
+The
 .Fn sigpending
+system call
 will fail if:
 .Bl -tag -width Er
 .It Bq Er EFAULT
@@ -66,9 +67,11 @@ argument specified an invalid address.
 .El
 .Sh SEE ALSO
 .Xr sigaction 2 ,
-.Xr sigprocmask 2
+.Xr sigprocmask 2 ,
+.Xr sigsuspend 2 ,
+.Xr sigsetops 3
 .Sh STANDARDS
 The
 .Fn sigpending
-function call is expected to conform to
+system call is expected to conform to
 .St -p1003.1-90 .
diff --git a/lib/libc/sys/sigreturn.2 b/lib/libc/sys/sigreturn.2
index c50b27b..32ba42a 100644
--- a/lib/libc/sys/sigreturn.2
+++ b/lib/libc/sys/sigreturn.2
@@ -26,9 +26,9 @@
 .\" SUCH DAMAGE.
 .\"
 .\"     @(#)sigreturn.2	8.1 (Berkeley) 6/4/93
-.\" $FreeBSD: src/lib/libc/sys/sigreturn.2,v 1.6.2.6 2002/09/15 00:33:23 archie Exp $
+.\" $FreeBSD: head/lib/libc/sys/sigreturn.2 255296 2013-09-06 09:08:40Z jilles $
 .\"
-.Dd June 4, 1993
+.Dd July 20, 2016
 .Dt SIGRETURN 2
 .Os
 .Sh NAME
@@ -41,10 +41,12 @@
 .Ft int
 .Fn sigreturn "ucontext_t *scp"
 .Sh DESCRIPTION
-.Fn Sigreturn
+The
+.Fn sigreturn
+system call
 allows users to atomically unmask, switch stacks,
 and return from a signal context.
-The processes signal mask and stack status are
+The thread's signal mask and stack status are
 restored from the context structure pointed to by
 .Fa scp .
 The system call does not return;
@@ -54,22 +56,22 @@ Execution resumes at the specified pc.
 This system call is used by the trampoline code and
 .Xr longjmp 3
 when returning from a signal to the previously executing program.
-.Sh NOTES
-This system call is not available in
-.Bx 4.2
-hence it should not be used if backward compatibility is needed.
 .Sh RETURN VALUES
 If successful, the system call does not return.
 Otherwise, a value of -1 is returned and
 .Va errno
 is set to indicate the error.
 .Sh ERRORS
-.Fn Sigreturn
-will fail and the process context will remain unchanged
+The
+.Fn sigreturn
+system call
+will fail and the thread context will remain unchanged
 if one of the following occurs.
 .Bl -tag -width Er
 .It Bq Er EFAULT
-.Fa Scp
+The
+.Fa scp
+argument
 points to memory that is not a valid part of the process
 address space.
 .It Bq Er EINVAL
@@ -83,5 +85,5 @@ raise the privilege level of the process.
 .Sh HISTORY
 The
 .Fn sigreturn
-function call appeared in
+system call appeared in
 .Bx 4.3 .
diff --git a/lib/libc/sys/sigwaitinfo.2 b/lib/libc/sys/sigwaitinfo.2
new file mode 100644
index 0000000..1de2a76
--- /dev/null
+++ b/lib/libc/sys/sigwaitinfo.2
@@ -0,0 +1,207 @@
+.\" Copyright (c) 2005 David Xu <davidxu@FreeBSD.org>
+.\" All rights reserved.
+.\"
+.\" Redistribution and use in source and binary forms, with or without
+.\" modification, are permitted provided that the following conditions
+.\" are met:
+.\" 1. Redistributions of source code must retain the above copyright
+.\"    notice(s), this list of conditions and the following disclaimer as
+.\"    the first lines of this file unmodified other than the possible
+.\"    addition of one or more copyright notices.
+.\" 2. Redistributions in binary form must reproduce the above copyright
+.\"    notice(s), this list of conditions and the following disclaimer in
+.\"    the documentation and/or other materials provided with the
+.\"    distribution.
+.\"
+.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) ``AS IS'' AND ANY
+.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) BE
+.\" LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+.\" BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+.\" WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+.\" OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+.\" EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+.\"
+.\" $FreeBSD: head/lib/libc/sys/sigwaitinfo.2 276006 2014-12-21 12:36:36Z brueffer $
+.\"
+.Dd July 20, 2016
+.Dt SIGTIMEDWAIT 2
+.Os
+.Sh NAME
+.Nm sigtimedwait , sigwaitinfo
+.Nd "wait for queued signals (REALTIME)"
+.Sh LIBRARY
+.Lb libc
+.Sh SYNOPSIS
+.In signal.h
+.Ft int
+.Fo sigtimedwait
+.Fa "const sigset_t * restrict set" "siginfo_t * restrict info"
+.Fa "const struct timespec * restrict timeout"
+.Fc
+.Ft int
+.Fn sigwaitinfo "const sigset_t * restrict set" "siginfo_t * restrict info"
+.Sh DESCRIPTION
+The
+.Fn sigtimedwait
+system call is equivalent to
+.Fn sigwaitinfo
+except that if none of the signals specified by
+.Fa set
+are pending,
+.Fn sigtimedwait
+waits for the time interval specified in the
+.Vt timespec
+structure referenced by
+.Fa timeout .
+If the
+.Vt timespec
+structure pointed to by
+.Fa timeout
+is zero-valued and if none of the signals specified by
+.Fa set
+are pending, then
+.Fn sigtimedwait
+returns immediately with an error.
+If
+.Fa timeout
+is the
+.Dv NULL
+pointer, the behavior is unspecified.
+.\"The
+.\".Dv CLOCK_MONOTONIC
+.\"clock is used to measure the time interval specified by the
+.\".Fa timeout
+.\"argument.
+.Pp
+The
+.Fn sigwaitinfo
+system call selects the pending signal from the set specified by
+.Fa set .
+.\"Should any of multiple pending signals in the range
+.\".Dv SIGRTMIN
+.\"to
+.\".Dv SIGRTMAX
+.\"be selected, it shall be the lowest numbered one.
+.\"The
+.\"selection order between realtime and non-realtime signals, or
+.\"between multiple pending non-realtime signals, is unspecified.
+If no signal in
+.Fa set
+is pending at the time of the call, the calling thread
+is suspended until one or more signals in
+.Fa set
+become pending or until it is interrupted by an unblocked, caught signal.
+.Pp
+The
+.Fn sigwaitinfo
+system call is equivalent to the
+.Fn sigwait
+function call if the
+.Fa info
+argument is
+.Dv NULL .
+If the
+.Fa info
+argument is
+.Pf non- Dv NULL ,
+the
+.Fn sigwaitinfo
+function is equivalent to
+.Fn sigwait ,
+except that the selected signal number shall be stored in the
+.Fa si_signo
+member, and the cause of the signal shall be stored in the
+.Fa si_code
+member.
+Besides this, the
+.Fn sigwaitinfo
+and
+.Fn sigtimedwait
+system calls may return
+.Er EINTR
+if interrupted by signal, which is not allowed for the
+.Fn sigwait
+function.
+.Pp
+If any value is queued to the selected signal, the first such queued
+value is dequeued and, if the info argument is
+.Pf non- Dv NULL ,
+the value is stored in the
+.Fa si_value
+member of
+.Fa info .
+The system resource used to queue the signal
+is released and returned to the system for other use.
+If no value is queued,
+the content of the
+.Fa si_value
+member is zero-valued.
+If no further signals are
+queued for the selected signal, the pending indication for that signal
+is reset.
+.Sh RETURN VALUES
+Upon successful completion (that is, one of the signals specified by
+.Fa set
+is pending or is generated)
+.Fn sigwaitinfo
+and
+.Fn sigtimedwait
+return the selected signal number.
+Otherwise, the functions return a value of \-1
+and set the global variable
+.Va errno
+to indicate the error.
+.Sh ERRORS
+The
+.Fn sigtimedwait
+system call
+will fail if:
+.Bl -tag -width Er
+.It Bq Er EAGAIN
+No signal specified by set was generated within the specified timeout period.
+.El
+.Pp
+The
+.Fn sigtimedwait
+and
+.Fn sigwaitinfo
+system calls fail if:
+.Bl -tag -width Er
+.It Bq Er EINTR
+The wait was interrupted by an unblocked, caught signal.
+.El
+.Pp
+The
+.Fn sigtimedwait
+system call may also fail if:
+.Bl -tag -width Er
+.It Bq Er EINVAL
+The
+.Fa timeout
+argument specified a
+.Fa tv_nsec
+value less than zero or greater than or equal
+to 1000 million.
+Kernel only checks for this error if no signal is pending in set and it
+is necessary to wait.
+.El
+.Sh SEE ALSO
+.Xr sigaction 2 ,
+.Xr sigpending 2 ,
+.\" .Xr sigqueue 2 ,
+.Xr sigsuspend 2 ,
+.Xr pause 3 ,
+.Xr pthread_sigmask 3 ,
+.\" .Xr siginfo 3 ,
+.Xr sigwait 3
+.Sh STANDARDS
+The
+.Fn sigtimedwait
+and
+.Fn sigwaitinfo
+system calls conform to
+.St -p1003.1-96 .
diff --git a/lib/libpthread/sigwait.3 b/lib/libpthread/sigwait.3
index 3821a66..2ec8e0e 100644
--- a/lib/libpthread/sigwait.3
+++ b/lib/libpthread/sigwait.3
@@ -26,7 +26,7 @@
 .\" EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 .\"
 .\" $FreeBSD: src/lib/libc_r/man/sigwait.3,v 1.2.2.6 2001/12/17 10:08:26 ru Exp $
-.Dd April 15, 2009
+.Dd July 20, 2016
 .Dt SIGWAIT 3
 .Os
 .Sh NAME
@@ -37,7 +37,7 @@
 .Sh SYNOPSIS
 .In signal.h
 .Ft int
-.Fn sigwait "const sigset_t *set" "int *sig"
+.Fn sigwait "const sigset_t * __restrict set" "int * __restrict sig"
 .Sh DESCRIPTION
 The
 .Fn sigwait
@@ -49,7 +49,7 @@ waits until one or more of the selected signals has been generated.
 Then
 .Fn sigwait
 atomically clears one of the selected signals from the set of pending signals
-for the process and sets the location pointed to by
+(for the process or for the current thread) and sets the location pointed to by
 .Fa sig
 to the signal number that was cleared.
 .Pp
@@ -65,19 +65,23 @@ returns 0 and sets the location pointed to by
 to the cleared signal number.
 Otherwise, an error number is returned.
 .Sh ERRORS
+The
 .Fn sigwait
-will fail if:
+function will fail if:
 .Bl -tag -width Er
 .It Bq Er EINVAL
+The
 .Fa set
-specifies one or more invalid signal numbers.
+argument specifies one or more invalid signal numbers.
 .El
 .Sh SEE ALSO
 .Xr sigaction 2 ,
 .Xr sigpending 2 ,
 .Xr sigsuspend 2 ,
+.Xr pause 3 ,
 .Xr pthread_sigmask 3
 .Sh STANDARDS
+The
 .Fn sigwait
-conforms to
+function conforms to
 .St -p1003.1-96 .
-- 
2.7.2

