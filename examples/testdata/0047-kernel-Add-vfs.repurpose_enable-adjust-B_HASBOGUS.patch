From ca88a24a2812a54364b719fab5019802ec6836fc Mon Sep 17 00:00:00 2001
From: Matthew Dillon <dillon@apollo.backplane.com>
Date: Sat, 23 Jul 2016 18:57:15 -0700
Subject: [PATCH 047/100] kernel - Add vfs.repurpose_enable, adjust B_HASBOGUS

* Add vfs.repurpose_enable, default disabled.  If this feature is turned on
  the system will try to repurpose the VM pages underlying a buffer on
  re-use instead of allowing the VM pages to cycle into the VM page cache.
  Designed for high I/O-load environments.

* Use the B_HASBOGUS flag to determine if a pmap_qenter() is required,
  and devolve the case to a single call to pmap_qenter() instead of one
  for each bogus page.
---
 sys/kern/vfs_bio.c     | 44 ++++++++++++++++++++++++++++----------------
 sys/kern/vfs_cluster.c |  5 ++++-
 2 files changed, 32 insertions(+), 17 deletions(-)

diff --git a/sys/kern/vfs_bio.c b/sys/kern/vfs_bio.c
index fd8e1de..5b21164 100644
--- a/sys/kern/vfs_bio.c
+++ b/sys/kern/vfs_bio.c
@@ -164,6 +164,7 @@ static struct thread *bufdaemonhw_td;
 static u_int lowmempgallocs;
 static u_int lowmempgfails;
 static u_int flushperqueue = 1024;
+static int repurpose_enable;
 
 /*
  * Sysctls for operational control of the buffer cache.
@@ -186,6 +187,8 @@ SYSCTL_UINT(_vfs, OID_AUTO, lowmempgfails, CTLFLAG_RW, &lowmempgfails, 0,
 	"Page allocations which failed during periods of very low free memory");
 SYSCTL_UINT(_vfs, OID_AUTO, vm_cycle_point, CTLFLAG_RW, &vm_cycle_point, 0,
 	"Recycle pages to active or inactive queue transition pt 0-64");
+SYSCTL_UINT(_vfs, OID_AUTO, repurpose_enable, CTLFLAG_RW, &repurpose_enable, 0,
+	"Enable buffer cache VM repurposing for high-I/O");
 /*
  * Sysctls determining current state of the buffer cache.
  */
@@ -1463,19 +1466,20 @@ brelse(struct buf *bp)
 
 					mtmp = bp->b_xio.xio_pages[j];
 					if (mtmp == bogus_page) {
+						if ((bp->b_flags & B_HASBOGUS) == 0)
+							panic("brelse: bp %p corrupt bogus", bp);
 						mtmp = vm_page_lookup(obj, poff + j);
-						if (!mtmp) {
-							panic("brelse: page missing");
-						}
+						if (!mtmp)
+							panic("brelse: bp %p page %d missing", bp, j);
 						bp->b_xio.xio_pages[j] = mtmp;
 					}
 				}
-				bp->b_flags &= ~B_HASBOGUS;
 				vm_object_drop(obj);
 
-				if ((bp->b_flags & B_INVAL) == 0) {
+				if ((bp->b_flags & B_HASBOGUS) || (bp->b_flags & B_INVAL) == 0) {
 					pmap_qenter(trunc_page((vm_offset_t)bp->b_data),
 						bp->b_xio.xio_pages, bp->b_xio.xio_npages);
+					bp->b_flags &= ~B_HASBOGUS;
 				}
 				m = bp->b_xio.xio_pages[i];
 			}
@@ -2127,7 +2131,8 @@ restart:
 		 */
 		if (qindex == BQUEUE_CLEAN) {
 			if (bp->b_flags & B_VMIO) {
-				if (repurposep && bp->b_bufsize &&
+				if (repurpose_enable &&
+				    repurposep && bp->b_bufsize &&
 				    (bp->b_flags & (B_DELWRI | B_MALLOC)) == 0) {
 					*repurposep = bp->b_vp->v_object;
 					vm_object_hold(*repurposep);
@@ -3974,8 +3979,8 @@ bpdone(struct buf *bp, int elseit)
 
 		vm_object_hold(obj);
 		for (i = 0; i < bp->b_xio.xio_npages; i++) {
-			int bogusflag = 0;
 			int resid;
+			int isbogus;
 
 			resid = ((foff + PAGE_SIZE) & ~(off_t)PAGE_MASK) - foff;
 			if (resid > iosize)
@@ -3989,13 +3994,15 @@ bpdone(struct buf *bp, int elseit)
 			 */
 			m = bp->b_xio.xio_pages[i];
 			if (m == bogus_page) {
-				bogusflag = 1;
+				if ((bp->b_flags & B_HASBOGUS) == 0)
+					panic("bpdone: bp %p corrupt bogus", bp);
 				m = vm_page_lookup(obj, OFF_TO_IDX(foff));
 				if (m == NULL)
 					panic("bpdone: page disappeared");
 				bp->b_xio.xio_pages[i] = m;
-				pmap_qenter(trunc_page((vm_offset_t)bp->b_data),
-					bp->b_xio.xio_pages, bp->b_xio.xio_npages);
+				isbogus = 1;
+			} else {
+				isbogus = 0;
 			}
 #if defined(VFS_BIO_DEBUG)
 			if (OFF_TO_IDX(foff) != m->pindex) {
@@ -4011,9 +4018,8 @@ bpdone(struct buf *bp, int elseit)
 			 * only need to do this here in the read case.
 			 */
 			vm_page_busy_wait(m, FALSE, "bpdpgw");
-			if (cmd == BUF_CMD_READ && !bogusflag && resid > 0) {
+			if (cmd == BUF_CMD_READ && isbogus == 0 && resid > 0)
 				vfs_clean_one_page(bp, i, m);
-			}
 			vm_page_flag_clear(m, PG_ZERO);
 
 			/*
@@ -4050,7 +4056,11 @@ bpdone(struct buf *bp, int elseit)
 			foff = (foff + PAGE_SIZE) & ~(off_t)PAGE_MASK;
 			iosize -= resid;
 		}
-		bp->b_flags &= ~B_HASBOGUS;
+		if (bp->b_flags & B_HASBOGUS) {
+			pmap_qenter(trunc_page((vm_offset_t)bp->b_data),
+				    bp->b_xio.xio_pages, bp->b_xio.xio_npages);
+			bp->b_flags &= ~B_HASBOGUS;
+		}
 		vm_object_drop(obj);
 	}
 
@@ -4178,8 +4188,6 @@ vfs_unbusy_pages(struct buf *bp)
 					panic("vfs_unbusy_pages: page missing");
 				}
 				bp->b_xio.xio_pages[i] = m;
-				pmap_qenter(trunc_page((vm_offset_t)bp->b_data),
-					bp->b_xio.xio_pages, bp->b_xio.xio_npages);
 			}
 			vm_page_busy_wait(m, FALSE, "bpdpgw");
 			vm_page_flag_clear(m, PG_ZERO);
@@ -4187,7 +4195,11 @@ vfs_unbusy_pages(struct buf *bp)
 			vm_page_wakeup(m);
 			vm_object_pip_wakeup(obj);
 		}
-		bp->b_flags &= ~B_HASBOGUS;
+		if (bp->b_flags & B_HASBOGUS) {
+			pmap_qenter(trunc_page((vm_offset_t)bp->b_data),
+				    bp->b_xio.xio_pages, bp->b_xio.xio_npages);
+			bp->b_flags &= ~B_HASBOGUS;
+		}
 		vm_object_drop(obj);
 	}
 }
diff --git a/sys/kern/vfs_cluster.c b/sys/kern/vfs_cluster.c
index e56520d..afcc3d0 100644
--- a/sys/kern/vfs_cluster.c
+++ b/sys/kern/vfs_cluster.c
@@ -1041,8 +1041,10 @@ cluster_rbuild(struct vnode *vp, off_t filesize, off_t loffset, off_t doffset,
 				bp->b_xio.xio_pages[bp->b_xio.xio_npages] = m;
 				bp->b_xio.xio_npages++;
 			}
-			if ((m->valid & VM_PAGE_BITS_ALL) == VM_PAGE_BITS_ALL)
+			if ((m->valid & VM_PAGE_BITS_ALL) == VM_PAGE_BITS_ALL) {
 				tbp->b_xio.xio_pages[j] = bogus_page;
+				tbp->b_flags |= B_HASBOGUS;
+			}
 		}
 		/*
 		 * XXX shouldn't this be += size for both, like in 
@@ -1068,6 +1070,7 @@ cluster_rbuild(struct vnode *vp, off_t filesize, off_t loffset, off_t doffset,
 		if ((bp->b_xio.xio_pages[j]->valid & VM_PAGE_BITS_ALL) ==
 		    VM_PAGE_BITS_ALL) {
 			bp->b_xio.xio_pages[j] = bogus_page;
+			bp->b_flags |= B_HASBOGUS;
 		}
 	}
 	if (bp->b_bufsize > bp->b_kvasize) {
-- 
2.7.2

