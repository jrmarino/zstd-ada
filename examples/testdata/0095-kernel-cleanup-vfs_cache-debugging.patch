From 8f73b9eea0afc37d3adf87d662ae99210a17f45a Mon Sep 17 00:00:00 2001
From: Matthew Dillon <dillon@apollo.backplane.com>
Date: Sat, 30 Jul 2016 12:27:09 -0700
Subject: [PATCH 095/100] kernel - cleanup vfs_cache debugging

* Remove the deep namecache recursion warning, we've taken care of it
  properly for a while now so we don't need to know when it happens any
  more.

* Augment the cache_inval_internal warnings with more information.
---
 sys/kern/vfs_cache.c | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/sys/kern/vfs_cache.c b/sys/kern/vfs_cache.c
index 256f193..5dad6ab 100644
--- a/sys/kern/vfs_cache.c
+++ b/sys/kern/vfs_cache.c
@@ -1510,8 +1510,6 @@ _cache_inval(struct namecache *ncp, int flags)
 		r = _cache_inval_internal(ncp, flags, &track);
 		if (track.resume_ncp == NULL)
 			break;
-		kprintf("Warning: deep namecache recursion at %s\n",
-			ncp->nc_name);
 		_cache_unlock(ncp);
 		while ((ncp2 = track.resume_ncp) != NULL) {
 			track.resume_ncp = NULL;
@@ -1569,7 +1567,8 @@ _cache_inval_internal(struct namecache *ncp, int flags, struct cinvtrack *track)
 			nextkid = NULL;
 			if (kid->nc_parent != ncp) {
 				_cache_drop(kid);
-				kprintf("cache_inval_internal restartA %s\n", ncp->nc_name);
+				kprintf("cache_inval_internal restartA %s\n",
+					ncp->nc_name);
 				restart = 1;
 				break;
 			}
@@ -1591,7 +1590,9 @@ _cache_inval_internal(struct namecache *ncp, int flags, struct cinvtrack *track)
 			) {
 				_cache_lock(kid);
 				if (kid->nc_parent != ncp) {
-					kprintf("cache_inval_internal restartB %s\n", ncp->nc_name);
+					kprintf("cache_inval_internal "
+						"restartB %s\n",
+						ncp->nc_name);
 					restart = 1;
 					_cache_unlock(kid);
 					_cache_drop(kid);
-- 
2.7.2

