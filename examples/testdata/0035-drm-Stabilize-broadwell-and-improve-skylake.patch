From a3268cb6a0bf7756350752b1e8c7954fdb650c89 Mon Sep 17 00:00:00 2001
From: Matthew Dillon <dillon@apollo.backplane.com>
Date: Fri, 22 Jul 2016 11:22:32 -0700
Subject: [PATCH 035/100] drm - Stabilize broadwell and improve skylake

* The issue was primarily the bitops on longs were all wrong.  '1 << N'
  returns an integer (even if N is a long), so those had to be 1L or 1LU.
  There were also some missing parenthesis in the bit test code.

* Throw in one fix from Linux, but I think its basically a NOP when DMAPs
  are used (and we use DMAPs).

* Add some code to catch a particular failure condition by locking up X
  in a while/tsleep loop instead of crashing outright, allowing a remote
  login to kgdb the live system.
---
 sys/dev/drm/i915/i915_gem_gtt.c             | 15 ++++++++++++++-
 sys/dev/drm/include/asm/bitops/non-atomic.h |  4 ++--
 sys/dev/drm/include/linux/bitops.h          | 10 +++++-----
 3 files changed, 21 insertions(+), 8 deletions(-)

diff --git a/sys/dev/drm/i915/i915_gem_gtt.c b/sys/dev/drm/i915/i915_gem_gtt.c
index 9e4355c..2209d92 100644
--- a/sys/dev/drm/i915/i915_gem_gtt.c
+++ b/sys/dev/drm/i915/i915_gem_gtt.c
@@ -786,7 +786,10 @@ static void gen8_ppgtt_clear_pte_range(struct i915_address_space *vm,
 			num_entries--;
 		}
 
-		kunmap_px(ppgtt, pt);
+		kunmap_px(ppgtt, pt_vaddr);	/* XXX dillon, out of order
+						 * patch from linux
+						 * 44a71024 12-Apr-2016
+						 */
 
 		pte = 0;
 		if (++pde == I915_PDES) {
@@ -840,7 +843,15 @@ gen8_ppgtt_insert_pte_entries(struct i915_address_space *vm,
 	while (__sg_page_iter_next(sg_iter)) {
 		if (pt_vaddr == NULL) {
 			struct i915_page_directory *pd = pdp->page_directory[pdpe];
+			while (pd == NULL) {
+				kprintf("PD NULL pdp %p pdpe %u\n", pdp, pdpe);
+				tsleep(&pd, 0, "froze", hz);
+			}
 			struct i915_page_table *pt = pd->page_table[pde];
+			while (pt == NULL) {
+				kprintf("PT NULL pdp %p pdpe %u\n", pd, pde);
+				tsleep(&pd, 0, "froze", hz);
+			}
 
 			pt_vaddr = kmap_px(pt);
 		}
@@ -1322,6 +1333,8 @@ static int gen8_alloc_va_range_3lvl(struct i915_address_space *vm,
 		gen8_for_each_pde(pt, pd, pd_start, pd_len, temp, pde) {
 			/* Same reasoning as pd */
 			WARN_ON(!pt);
+			if (pt == NULL)		/* XXX dillon hack */
+				continue;	/* XXX dillon hack */
 			WARN_ON(!pd_len);
 			WARN_ON(!gen8_pte_count(pd_start, pd_len));
 
diff --git a/sys/dev/drm/include/asm/bitops/non-atomic.h b/sys/dev/drm/include/asm/bitops/non-atomic.h
index 0c16a05..49e6c70 100644
--- a/sys/dev/drm/include/asm/bitops/non-atomic.h
+++ b/sys/dev/drm/include/asm/bitops/non-atomic.h
@@ -29,12 +29,12 @@
 
 static inline void __set_bit(int nr, volatile unsigned long *addr)
 {
-	*(addr + (nr / BITS_PER_LONG)) |= (1 << (nr % BITS_PER_LONG));
+	*(addr + (nr / BITS_PER_LONG)) |= (1LU << (nr % BITS_PER_LONG));
 }
 
 static inline void __clear_bit(int nr, volatile unsigned long *addr)
 {
-	*(addr + (nr / BITS_PER_LONG)) &= ~(1 << (nr % BITS_PER_LONG));
+	*(addr + (nr / BITS_PER_LONG)) &= ~(1LU << (nr % BITS_PER_LONG));
 }
 
 #endif	/* _ASM_BITOPS_NON_ATOMIC_H_ */
diff --git a/sys/dev/drm/include/linux/bitops.h b/sys/dev/drm/include/linux/bitops.h
index 437d662..df22eea 100644
--- a/sys/dev/drm/include/linux/bitops.h
+++ b/sys/dev/drm/include/linux/bitops.h
@@ -291,14 +291,14 @@ bitmap_empty(unsigned long *addr, int size)
 #define	NBLONG	(NBBY * sizeof(long))
 
 #define	set_bit(i, a)							\
-    atomic_set_long(&((volatile long *)(a))[(i)/NBLONG], 1 << (i) % NBLONG)
+    atomic_set_long(&((volatile long *)(a))[(i)/NBLONG], 1LU << ((i) % NBLONG))
 
 #define	clear_bit(i, a)							\
-    atomic_clear_long(&((volatile long *)(a))[(i)/NBLONG], 1 << (i) % NBLONG)
+    atomic_clear_long(&((volatile long *)(a))[(i)/NBLONG], 1LU << ((i) % NBLONG))
 
 #define	test_bit(i, a)							\
     !!(atomic_load_acq_long(&((volatile long *)(a))[(i)/NBLONG]) &	\
-    1 << ((i) % NBLONG))
+			    (1LU << ((i) % NBLONG)))
 
 static inline long
 test_and_clear_bit(long bit, long *var)
@@ -307,7 +307,7 @@ test_and_clear_bit(long bit, long *var)
 
 	var += bit / (sizeof(long) * NBBY);
 	bit %= sizeof(long) * NBBY;
-	bit = 1 << bit;
+	bit = 1L << bit;
 	do {
 		val = *(volatile long *)var;
 	} while (atomic_cmpset_long(var, val, val & ~bit) == 0);
@@ -336,7 +336,7 @@ test_and_set_bit(long bit, volatile unsigned long *var)
 
 	var += bit / (sizeof(long) * NBBY);
 	bit %= sizeof(long) * NBBY;
-	bit = 1 << bit;
+	bit = 1L << bit;
 	do {
 		val = *(volatile long *)var;
 	} while (atomic_cmpset_long(var, val, val | bit) == 0);
-- 
2.7.2

