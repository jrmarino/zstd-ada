From 743146ae2a6000d439d5977d490403d7fdf54979 Mon Sep 17 00:00:00 2001
From: Matthew Dillon <dillon@apollo.backplane.com>
Date: Sun, 24 Jul 2016 00:56:04 -0700
Subject: [PATCH 053/100] kernel - Fix atomic op comparison

* The sequence was testing a signed integer and then testing the same
  variable using atomic_fetchadd_int(&var, 0).  Unfortunately, the
  atomic-op returns an unsigned value so the result is that when the
  buffer count was exhausted, the program would hard-loop without
  calling tsleep.

* Fixed by casting the atomic op.

* Should fix the hardlock issue once and for all.
---
 sys/vm/vm_pager.c | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/sys/vm/vm_pager.c b/sys/vm/vm_pager.c
index 0112b37..91188bf 100644
--- a/sys/vm/vm_pager.c
+++ b/sys/vm/vm_pager.c
@@ -432,12 +432,12 @@ getpbuf(int *pfreecnt)	/* raw */
 	for (;;) {
 		while (pfreecnt && *pfreecnt <= 0) {
 			tsleep_interlock(pfreecnt, 0);
-			if (atomic_fetchadd_int(pfreecnt, 0) <= 0)
+			if ((int)atomic_fetchadd_int(pfreecnt, 0) <= 0)
 				tsleep(pfreecnt, PINTERLOCKED, "wswbuf0", 0);
 		}
 		if (pbuf_raw_count <= 0) {
 			tsleep_interlock(&pbuf_raw_count, 0);
-			if (atomic_fetchadd_int(&pbuf_raw_count, 0) <= 0)
+			if ((int)atomic_fetchadd_int(&pbuf_raw_count, 0) <= 0)
 				tsleep(&pbuf_raw_count, PINTERLOCKED,
 				       "wswbuf0", 0);
 			continue;
@@ -477,12 +477,12 @@ getpbuf_kva(int *pfreecnt)
 	for (;;) {
 		while (pfreecnt && *pfreecnt <= 0) {
 			tsleep_interlock(pfreecnt, 0);
-			if (atomic_fetchadd_int(pfreecnt, 0) <= 0)
+			if ((int)atomic_fetchadd_int(pfreecnt, 0) <= 0)
 				tsleep(pfreecnt, PINTERLOCKED, "wswbuf0", 0);
 		}
 		if (pbuf_kva_count <= 0) {
 			tsleep_interlock(&pbuf_kva_count, 0);
-			if (atomic_fetchadd_int(&pbuf_kva_count, 0) <= 0)
+			if ((int)atomic_fetchadd_int(&pbuf_kva_count, 0) <= 0)
 				tsleep(&pbuf_kva_count, PINTERLOCKED,
 				       "wswbuf0", 0);
 			continue;
@@ -526,12 +526,12 @@ getpbuf_mem(int *pfreecnt)
 	for (;;) {
 		while (pfreecnt && *pfreecnt <= 0) {
 			tsleep_interlock(pfreecnt, 0);
-			if (atomic_fetchadd_int(pfreecnt, 0) <= 0)
+			if ((int)atomic_fetchadd_int(pfreecnt, 0) <= 0)
 				tsleep(pfreecnt, PINTERLOCKED, "wswbuf0", 0);
 		}
 		if (pbuf_mem_count <= 0) {
 			tsleep_interlock(&pbuf_mem_count, 0);
-			if (atomic_fetchadd_int(&pbuf_mem_count, 0) <= 0)
+			if ((int)atomic_fetchadd_int(&pbuf_mem_count, 0) <= 0)
 				tsleep(&pbuf_mem_count, PINTERLOCKED,
 				       "wswbuf0", 0);
 			continue;
@@ -666,7 +666,7 @@ relpbuf(struct buf *bp, int *pfreecnt)
 		spin_unlock(&bswspin_mem[iter]);
 		if (wake)
 			wakeup(&pbuf_mem_count);
-	} else if (swbuf_kva && bp < &swbuf_kva[nswbuf_kva]) {
+	} else if (bp >= swbuf_kva && bp < &swbuf_kva[nswbuf_kva]) {
 		KKASSERT(bp->b_kvabase);
 		spin_lock(&bswspin_kva[iter]);
 		TAILQ_INSERT_HEAD(&bswlist_kva[iter], bp, b_freelist);
-- 
2.7.2

